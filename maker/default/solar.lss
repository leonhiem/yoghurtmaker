
solar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000030  00800060  00800060  0000071c  2**0
                  ALLOC
  2 .eeprom       00000001  00810000  00810000  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000360  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f4  00000000  00000000  00000b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004dd  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001fb  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000078f  00000000  00000000  000013dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002df  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000012b  00000000  00000000  00001f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	29 c0       	rjmp	.+82     	; 0x56 <__bad_interrupt>
   4:	28 c0       	rjmp	.+80     	; 0x56 <__bad_interrupt>
   6:	27 c0       	rjmp	.+78     	; 0x56 <__bad_interrupt>
   8:	26 c0       	rjmp	.+76     	; 0x56 <__bad_interrupt>
   a:	25 c0       	rjmp	.+74     	; 0x56 <__bad_interrupt>
   c:	ba c0       	rjmp	.+372    	; 0x182 <__vector_6>
   e:	23 c0       	rjmp	.+70     	; 0x56 <__bad_interrupt>
  10:	22 c0       	rjmp	.+68     	; 0x56 <__bad_interrupt>
  12:	21 c0       	rjmp	.+66     	; 0x56 <__bad_interrupt>
  14:	20 c0       	rjmp	.+64     	; 0x56 <__bad_interrupt>
  16:	1f c0       	rjmp	.+62     	; 0x56 <__bad_interrupt>
  18:	1e c0       	rjmp	.+60     	; 0x56 <__bad_interrupt>
  1a:	d3 c0       	rjmp	.+422    	; 0x1c2 <__vector_13>
  1c:	1c c0       	rjmp	.+56     	; 0x56 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__vector_15>
  20:	36 c0       	rjmp	.+108    	; 0x8e <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e8       	ldi	r30, 0x88	; 136
  32:	f6 e0       	ldi	r31, 0x06	; 6
  34:	03 c0       	rjmp	.+6      	; 0x3c <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	c8 95       	lpm
  38:	31 96       	adiw	r30, 0x01	; 1
  3a:	0d 92       	st	X+, r0

0000003c <.do_copy_data_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b1 07       	cpc	r27, r17
  40:	d1 f7       	brne	.-12     	; 0x36 <.do_copy_data_loop>

00000042 <__do_clear_bss>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
  4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
  4c:	a0 39       	cpi	r26, 0x90	; 144
  4e:	b1 07       	cpc	r27, r17
  50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>
  52:	1f d2       	rcall	.+1086   	; 0x492 <main>
  54:	18 c3       	rjmp	.+1584   	; 0x686 <_exit>

00000056 <__bad_interrupt>:
  56:	d4 cf       	rjmp	.-88     	; 0x0 <__vectors>

00000058 <__vector_15>:
/*
 * Insterrupt service routines:
 */
ISR(USI_STR_vect)
{     
  58:	1f 92       	push	r1
  5a:	0f 92       	push	r0
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	0f 92       	push	r0
  60:	11 24       	eor	r1, r1
  62:	8f 93       	push	r24
 // Set default starting conditions for new TWI package
     USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
  64:	10 92 61 00 	sts	0x0061, r1
     DDR_USI  &= ~(1<<PORT_USI_SDA); // Set SDA as input
  68:	d6 98       	cbi	0x1a, 6	; 26

	while (
  6a:	cc 9b       	sbis	0x19, 4	; 25
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__vector_15+0x1a>
  6e:	ce 9b       	sbis	0x19, 6	; 25
  70:	fc cf       	rjmp	.-8      	; 0x6a <__vector_15+0x12>
       // SCL his high
       (PIN_USI & (1<<PIN_USI_SCL)) &&
       // and SDA is low
       !((PIN_USI & (1<<PIN_USI_SDA)))
  	);
     
	if (!(PIN_USI & (1<<PIN_USI_SDA))) {
  72:	ce 99       	sbic	0x19, 6	; 25
  74:	02 c0       	rjmp	.+4      	; 0x7a <__vector_15+0x22>

    	// a Stop Condition did not occur
    	USICR =
  76:	88 ef       	ldi	r24, 0xF8	; 248
  78:	01 c0       	rjmp	.+2      	; 0x7c <__vector_15+0x24>
         // keep Start Condition Interrupt enabled to detect RESTART
         ( 1 << USISIE ) |
         // enable Overflow Interrupt
         ( 1 << USIOIE ) |
         // set USI in Two-wire mode, hold SCL low on USI Counter overflow
         ( 1 << USIWM1 ) | ( 1 << USIWM0 ) |
         // Shift Register Clock Source = External, positive edge
         // 4-Bit Counter Source = external, both edges
         ( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) |
         // no toggle clock-port pin
         ( 0 << USITC );

  	} else {

    	// a Stop Condition did occur
    	USICR =
  7a:	88 ea       	ldi	r24, 0xA8	; 168
  7c:	8d b9       	out	0x0d, r24	; 13
         // enable Start Condition Interrupt
         ( 1 << USISIE ) |
         // disable Overflow Interrupt
         ( 0 << USIOIE ) |
         // set USI in Two-wire mode, no USI Counter overflow hold
         ( 1 << USIWM1 ) | ( 0 << USIWM0 ) |
         // Shift Register Clock Source = external, positive edge
         // 4-Bit Counter Source = external, both edges
         ( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) |
         // no toggle clock-port pin
         ( 0 << USITC );

  	} // end if

	USISR =
  7e:	80 ef       	ldi	r24, 0xF0	; 240
  80:	8e b9       	out	0x0e, r24	; 14
  82:	8f 91       	pop	r24
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <__vector_16>:
       // clear interrupt flags - resetting the Start Condition Flag will
       // release SCL
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);
}
 

ISR(USI_OVF_vect)
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	2f 93       	push	r18
  9a:	3f 93       	push	r19
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
   switch (USI_TWI_Overflow_State) {
  a4:	80 91 61 00 	lds	r24, 0x0061
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	09 f4       	brne	.+2      	; 0xae <__vector_16+0x20>
  ac:	3f c0       	rjmp	.+126    	; 0x12c <__stack+0x4d>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	30 f4       	brcc	.+12     	; 0xbe <__vector_16+0x30>
  b2:	88 23       	and	r24, r24
  b4:	61 f0       	breq	.+24     	; 0xce <__vector_16+0x40>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	09 f0       	breq	.+2      	; 0xbc <__vector_16+0x2e>
  ba:	58 c0       	rjmp	.+176    	; 0x16c <__stack+0x8d>
  bc:	1c c0       	rjmp	.+56     	; 0xf6 <__stack+0x17>
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	d9 f1       	breq	.+118    	; 0x138 <__stack+0x59>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	a8 f0       	brcs	.+42     	; 0xf0 <__stack+0x11>
  c6:	85 30       	cpi	r24, 0x05	; 5
  c8:	09 f0       	breq	.+2      	; 0xcc <__vector_16+0x3e>
  ca:	50 c0       	rjmp	.+160    	; 0x16c <__stack+0x8d>
  cc:	3b c0       	rjmp	.+118    	; 0x144 <__stack+0x65>
     // ---------- Address mode ----------
     // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
     case USI_SLAVE_CHECK_ADDRESS:
       if ((USIDR == 0) || (( USIDR&0xfe ) == TWI_slaveAddress)) {
  ce:	8f b1       	in	r24, 0x0f	; 15
  d0:	88 23       	and	r24, r24
  d2:	51 f0       	breq	.+20     	; 0xe8 <__stack+0x9>
  d4:	2f b1       	in	r18, 0x0f	; 15
  d6:	33 27       	eor	r19, r19
  d8:	2e 7f       	andi	r18, 0xFE	; 254
  da:	30 70       	andi	r19, 0x00	; 0
  dc:	80 91 60 00 	lds	r24, 0x0060
  e0:	99 27       	eor	r25, r25
  e2:	28 17       	cp	r18, r24
  e4:	39 07       	cpc	r19, r25
  e6:	f9 f4       	brne	.+62     	; 0x126 <__stack+0x47>
         if ( USIDR & 0x01 ) {
  e8:	78 9b       	sbis	0x0f, 0	; 15
  ea:	39 c0       	rjmp	.+114    	; 0x15e <__stack+0x7f>
           USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	38 c0       	rjmp	.+112    	; 0x160 <__stack+0x81>
         } else {
           USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
		 }
         SET_USI_TO_SEND_ACK();
       } else {
         SET_USI_TO_TWI_START_CONDITION_MODE();
       }
       break;
 
     // ----- Master write data mode ------
     // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
     case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
       if ( USIDR ) // If NACK, the master does not want more data.
  f0:	8f b1       	in	r24, 0x0f	; 15
  f2:	88 23       	and	r24, r24
  f4:	c1 f4       	brne	.+48     	; 0x126 <__stack+0x47>
       {
         SET_USI_TO_TWI_START_CONDITION_MODE();
         return;
       }
       // From here we just drop straight into USI_SLAVE_SEND_DATA if the master sent an ACK
 
     // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
     case USI_SLAVE_SEND_DATA:
 
       // Get data from Buffer       
       if (TWI_TxHead != TWI_TxTail) {
  f6:	90 91 74 00 	lds	r25, 0x0074
  fa:	80 91 75 00 	lds	r24, 0x0075
  fe:	98 17       	cp	r25, r24
 100:	91 f0       	breq	.+36     	; 0x126 <__stack+0x47>
         TWI_TxTail = ( TWI_TxTail + 1 ) & TWI_TX_BUFFER_MASK;
 102:	80 91 75 00 	lds	r24, 0x0075
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	87 70       	andi	r24, 0x07	; 7
 10a:	80 93 75 00 	sts	0x0075, r24
         USIDR = TWI_TxBuf[TWI_TxTail];
 10e:	e0 91 75 00 	lds	r30, 0x0075
 112:	ff 27       	eor	r31, r31
 114:	e4 59       	subi	r30, 0x94	; 148
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	80 81       	ld	r24, Z
 11a:	8f b9       	out	0x0f, r24	; 15
       }
       else // If the buffer is empty then:
       {
           SET_USI_TO_TWI_START_CONDITION_MODE();
           return;
       }
       USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 61 00 	sts	0x0061, r24
       SET_USI_TO_SEND_DATA();
 122:	d6 9a       	sbi	0x1a, 6	; 26
 124:	0d c0       	rjmp	.+26     	; 0x140 <__stack+0x61>
 126:	88 ea       	ldi	r24, 0xA8	; 168
 128:	8d b9       	out	0x0d, r24	; 13
 12a:	0a c0       	rjmp	.+20     	; 0x140 <__stack+0x61>
       break;
 
     // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
     case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
       USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	80 93 61 00 	sts	0x0061, r24
       SET_USI_TO_READ_ACK();
 132:	d6 98       	cbi	0x1a, 6	; 26
 134:	1f b8       	out	0x0f, r1	; 15
 136:	18 c0       	rjmp	.+48     	; 0x168 <__stack+0x89>
       break;
 
     // ----- Master read data mode ------
     // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
     case USI_SLAVE_REQUEST_DATA:
       USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 138:	85 e0       	ldi	r24, 0x05	; 5
 13a:	80 93 61 00 	sts	0x0061, r24
       SET_USI_TO_READ_DATA();
 13e:	d6 98       	cbi	0x1a, 6	; 26
 140:	80 e7       	ldi	r24, 0x70	; 112
 142:	13 c0       	rjmp	.+38     	; 0x16a <__stack+0x8b>
       break;
 
     // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
     case USI_SLAVE_GET_DATA_AND_SEND_ACK:
       // Put data into Buffer
       
       TWI_RxHead = ( TWI_RxHead + 1 ) & TWI_RX_BUFFER_MASK;
 144:	80 91 6a 00 	lds	r24, 0x006A
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	87 70       	andi	r24, 0x07	; 7
 14c:	80 93 6a 00 	sts	0x006A, r24
       TWI_RxBuf[TWI_RxHead] = USIDR;
 150:	e0 91 6a 00 	lds	r30, 0x006A
 154:	8f b1       	in	r24, 0x0f	; 15
 156:	ff 27       	eor	r31, r31
 158:	ee 59       	subi	r30, 0x9E	; 158
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 83       	st	Z, r24
 
       USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	80 93 61 00 	sts	0x0061, r24
       SET_USI_TO_SEND_ACK();
 164:	1f b8       	out	0x0f, r1	; 15
 166:	d6 9a       	sbi	0x1a, 6	; 26
 168:	8e e7       	ldi	r24, 0x7E	; 126
 16a:	8e b9       	out	0x0e, r24	; 14
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_6>:
       break;
   }
}



/*
 * - Update uptime
 * - Restart an ADC conversion
 */
ISR(TIM1_COMPA_vect)
{   	
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
    subs++;
 190:	80 91 89 00 	lds	r24, 0x0089
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 89 00 	sts	0x0089, r24
    if(subs >= 10) {    // == 1 second
 19a:	8a 30       	cpi	r24, 0x0A	; 10
 19c:	58 f0       	brcs	.+22     	; 0x1b4 <__vector_6+0x32>
        subs=0;
 19e:	10 92 89 00 	sts	0x0089, r1
        uptime+=1;
 1a2:	80 91 86 00 	lds	r24, 0x0086
 1a6:	90 91 87 00 	lds	r25, 0x0087
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	90 93 87 00 	sts	0x0087, r25
 1b0:	80 93 86 00 	sts	0x0086, r24
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_13>:
    }	
}



ISR(ADC_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
	uint8_t muxtmp;
    uint8_t lsb,msb;
    uint16_t sample;
	uint32_t tmp32;

    muxtmp = ADMUX;
 1e0:	47 b1       	in	r20, 0x07	; 7
    muxtmp &= 0xf;
 1e2:	4f 70       	andi	r20, 0x0F	; 15
        
    lsb = ADCL; // read the low part
 1e4:	24 b1       	in	r18, 0x04	; 4
    msb = ADCH; // read the high part
 1e6:	85 b1       	in	r24, 0x05	; 5

    sample = (uint16_t)lsb;
 1e8:	33 27       	eor	r19, r19
    sample |= ((uint16_t)msb)<<8;     
 1ea:	99 27       	eor	r25, r25
 1ec:	98 2f       	mov	r25, r24
 1ee:	88 27       	eor	r24, r24
 1f0:	28 2b       	or	r18, r24
 1f2:	39 2b       	or	r19, r25

    if(muxtmp == 3) {	
 1f4:	43 30       	cpi	r20, 0x03	; 3
 1f6:	31 f4       	brne	.+12     	; 0x204 <__vector_13+0x42>
		
		adc3_vsolar = sample;
 1f8:	30 93 7e 00 	sts	0x007E, r19
 1fc:	20 93 7d 00 	sts	0x007D, r18
		adcsequence=2;
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	1c c0       	rjmp	.+56     	; 0x23c <__vector_13+0x7a>
		
    } else if(muxtmp == 2) { 	
 204:	42 30       	cpi	r20, 0x02	; 2
 206:	e9 f4       	brne	.+58     	; 0x242 <__vector_13+0x80>
	
		if(sysstate == STATE_INIT) {
 208:	80 91 83 00 	lds	r24, 0x0083
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	29 f4       	brne	.+10     	; 0x21a <__vector_13+0x58>
			ioffset = sample;   
 210:	30 93 85 00 	sts	0x0085, r19
 214:	20 93 84 00 	sts	0x0084, r18
 218:	a4 c0       	rjmp	.+328    	; 0x362 <__vector_13+0x1a0>
		} else {
	
			// sample is 10bit
			// ioffset is 2.5V substract it, result will be 9 bit
			if(sample > ioffset) { // to make sure not make it negative...
 21a:	80 91 84 00 	lds	r24, 0x0084
 21e:	90 91 85 00 	lds	r25, 0x0085
 222:	82 17       	cp	r24, r18
 224:	93 07       	cpc	r25, r19
 226:	18 f0       	brcs	.+6      	; 0x22e <__vector_13+0x6c>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <__vector_13+0x70>
				sample -= ioffset;
 22e:	28 1b       	sub	r18, r24
 230:	39 0b       	sbc	r19, r25
        	} else {
				sample = 0;
        	}
			
			adc2_isense = sample;					
 232:	30 93 7c 00 	sts	0x007C, r19
 236:	20 93 7b 00 	sts	0x007B, r18
			adcsequence=1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 79 00 	sts	0x0079, r24
 240:	90 c0       	rjmp	.+288    	; 0x362 <__vector_13+0x1a0>
	    }	
		
		     
	} else if(muxtmp == 1) {	
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	39 f4       	brne	.+14     	; 0x254 <__vector_13+0x92>
		
		adc1_vbatt = sample;
 246:	30 93 77 00 	sts	0x0077, r19
 24a:	20 93 76 00 	sts	0x0076, r18
		adcsequence=0;
 24e:	10 92 79 00 	sts	0x0079, r1
 252:	87 c0       	rjmp	.+270    	; 0x362 <__vector_13+0x1a0>
		
    } else if(muxtmp == 0) { 
 254:	44 23       	and	r20, r20
 256:	09 f0       	breq	.+2      	; 0x25a <__vector_13+0x98>
 258:	84 c0       	rjmp	.+264    	; 0x362 <__vector_13+0x1a0>
				
		dcmax = (uint8_t)(sample>>2);
 25a:	93 2f       	mov	r25, r19
 25c:	82 2f       	mov	r24, r18
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	80 93 8f 00 	sts	0x008F, r24
		if(dcmax > 240) dcmax=240;
 26a:	81 3f       	cpi	r24, 0xF1	; 241
 26c:	18 f0       	brcs	.+6      	; 0x274 <__vector_13+0xb2>
 26e:	80 ef       	ldi	r24, 0xF0	; 240
 270:	80 93 8f 00 	sts	0x008F, r24
					
		adcsequence=3;	 
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	80 93 79 00 	sts	0x0079, r24
		
		if(sysstate == STATE_FLOAT) {
 27a:	80 91 83 00 	lds	r24, 0x0083
 27e:	84 30       	cpi	r24, 0x04	; 4
 280:	a1 f4       	brne	.+40     	; 0x2aa <__vector_13+0xe8>
			if(adc2_isense >= 50) { // 70mA
 282:	80 91 7b 00 	lds	r24, 0x007B
 286:	90 91 7c 00 	lds	r25, 0x007C
 28a:	c2 97       	sbiw	r24, 0x32	; 50
 28c:	38 f0       	brcs	.+14     	; 0x29c <__vector_13+0xda>
				if(OCR0A > 1) {
 28e:	86 b7       	in	r24, 0x36	; 54
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	08 f4       	brcc	.+2      	; 0x296 <__vector_13+0xd4>
 294:	66 c0       	rjmp	.+204    	; 0x362 <__vector_13+0x1a0>
					OCR0A-=1;						
 296:	86 b7       	in	r24, 0x36	; 54
 298:	81 50       	subi	r24, 0x01	; 1
 29a:	62 c0       	rjmp	.+196    	; 0x360 <__vector_13+0x19e>
				}
			} else if(adc2_isense < 50) {
				if(OCR0A < 240) {
 29c:	86 b7       	in	r24, 0x36	; 54
 29e:	80 3f       	cpi	r24, 0xF0	; 240
 2a0:	08 f0       	brcs	.+2      	; 0x2a4 <__vector_13+0xe2>
 2a2:	5f c0       	rjmp	.+190    	; 0x362 <__vector_13+0x1a0>
					OCR0A+=1;						
 2a4:	86 b7       	in	r24, 0x36	; 54
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	5b c0       	rjmp	.+182    	; 0x360 <__vector_13+0x19e>
				}					
			} 
		} else if(sysstate==STATE_CHARGE) {		
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <__vector_13+0xee>
 2ae:	57 c0       	rjmp	.+174    	; 0x35e <__vector_13+0x19c>
				   
			tmp32 = (uint32_t)(adc3_vsolar * adc2_isense);
 2b0:	20 91 7d 00 	lds	r18, 0x007D
 2b4:	30 91 7e 00 	lds	r19, 0x007E
			powernew = (uint16_t)(tmp32>>3);
 2b8:	60 91 7b 00 	lds	r22, 0x007B
 2bc:	70 91 7c 00 	lds	r23, 0x007C
 2c0:	93 2f       	mov	r25, r19
 2c2:	82 2f       	mov	r24, r18
 2c4:	c6 d1       	rcall	.+908    	; 0x652 <__mulhi3>
 2c6:	aa 27       	eor	r26, r26
 2c8:	bb 27       	eor	r27, r27
 2ca:	43 e0       	ldi	r20, 0x03	; 3
 2cc:	b6 95       	lsr	r27
 2ce:	a7 95       	ror	r26
 2d0:	97 95       	ror	r25
 2d2:	87 95       	ror	r24
 2d4:	4a 95       	dec	r20
 2d6:	d1 f7       	brne	.-12     	; 0x2cc <__vector_13+0x10a>
 2d8:	48 2f       	mov	r20, r24
 2da:	59 2f       	mov	r21, r25
 2dc:	90 93 80 00 	sts	0x0080, r25
 2e0:	80 93 7f 00 	sts	0x007F, r24
			if(powernew > powerold) {
 2e4:	80 91 81 00 	lds	r24, 0x0081
 2e8:	90 91 82 00 	lds	r25, 0x0082
 2ec:	84 17       	cp	r24, r20
 2ee:	95 07       	cpc	r25, r21
 2f0:	20 f4       	brcc	.+8      	; 0x2fa <__vector_13+0x138>
		    	Xp=1;					
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 7a 00 	sts	0x007A, r24
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <__vector_13+0x13c>
           	} else {
		    	Xp=0;					
 2fa:	10 92 7a 00 	sts	0x007A, r1
           	}
			if(adc3_vsolar > adc3_vsolarold) {
 2fe:	80 91 8a 00 	lds	r24, 0x008A
 302:	90 91 8b 00 	lds	r25, 0x008B
 306:	82 17       	cp	r24, r18
 308:	93 07       	cpc	r25, r19
 30a:	20 f4       	brcc	.+8      	; 0x314 <__vector_13+0x152>
				Xv=1;					           
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 78 00 	sts	0x0078, r24
 312:	02 c0       	rjmp	.+4      	; 0x318 <__vector_13+0x156>
			} else {
				Xv=0;				
 314:	10 92 78 00 	sts	0x0078, r1
			}

			powerold=powernew; 
 318:	50 93 82 00 	sts	0x0082, r21
 31c:	40 93 81 00 	sts	0x0081, r20
			adc3_vsolarold=adc3_vsolar;  
 320:	30 93 8b 00 	sts	0x008B, r19
 324:	20 93 8a 00 	sts	0x008A, r18
			
			if(bit_is_clear(PINA,PA6)) {
 328:	ce 9b       	sbis	0x19, 6	; 25
 32a:	16 c0       	rjmp	.+44     	; 0x358 <__vector_13+0x196>
				OCR0A=dcmax;
			} else {
				if( (Xp==0 && Xv==0) || (Xp==1 && Xv==1)) {
 32c:	80 91 7a 00 	lds	r24, 0x007A
 330:	88 23       	and	r24, r24
 332:	29 f4       	brne	.+10     	; 0x33e <__vector_13+0x17c>
 334:	80 91 78 00 	lds	r24, 0x0078
 338:	88 23       	and	r24, r24
 33a:	39 f0       	breq	.+14     	; 0x34a <__vector_13+0x188>
 33c:	0b c0       	rjmp	.+22     	; 0x354 <__vector_13+0x192>
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	81 f4       	brne	.+32     	; 0x362 <__vector_13+0x1a0>
 342:	80 91 78 00 	lds	r24, 0x0078
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	11 f4       	brne	.+4      	; 0x34e <__vector_13+0x18c>
					//if(OCR0A > 1) {
						OCR0A=0;
 34a:	16 be       	out	0x36, r1	; 54
 34c:	0a c0       	rjmp	.+20     	; 0x362 <__vector_13+0x1a0>
						//PORTB &= ~( (1<<LED_GREEN) );
						//PORTB |= ( (1<<LED_RED) ); 
					//}			

				} else if((Xp==1 && Xv==0) || (Xp==0 && Xv==1) ) {
 34e:	88 23       	and	r24, r24
 350:	19 f0       	breq	.+6      	; 0x358 <__vector_13+0x196>
 352:	07 c0       	rjmp	.+14     	; 0x362 <__vector_13+0x1a0>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	29 f4       	brne	.+10     	; 0x362 <__vector_13+0x1a0>
					//	if(OCR0A < 240) {
						OCR0A=dcmax;
 358:	80 91 8f 00 	lds	r24, 0x008F
 35c:	01 c0       	rjmp	.+2      	; 0x360 <__vector_13+0x19e>
						//PORTB |= ( (1<<LED_GREEN) );
						//PORTB &= ~( (1<<LED_RED) );
					//	}					
				}
			} 
		} else {
			OCR0A=1;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	86 bf       	out	0x36, r24	; 54
		} 
	}	   
	

    /*
     * Start ADC
     */
    
    // Init ADC
    ADMUX = cAdcV; 
 362:	17 b8       	out	0x07, r1	; 7
    ADMUX |= adcsequence;
 364:	87 b1       	in	r24, 0x07	; 7
 366:	90 91 79 00 	lds	r25, 0x0079
 36a:	89 2b       	or	r24, r25
 36c:	87 b9       	out	0x07, r24	; 7
    ADCSRA = cRestartAdc; // Restart the ADC again   
 36e:	8c ec       	ldi	r24, 0xCC	; 204
 370:	86 b9       	out	0x06, r24	; 6
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <timed_out>:
}





/*
 * Main loop
 */
int main() 
{
	uint8_t cmd;	

	// init portB
	DDRB = 0x07;
    PORTB = 0x08;
     

    // init portA
	DDRA = 0x0;     
	PORTA = 0xf0;
    

	adcsequence=3;
	adc3_vsolar=0;
	adc3_vsolarold=0;
    adc2_isense=0;
    adc1_vbatt=0;
	powernew=0;
	powerold=0;	


    // Reset the uptime    
    subs=0;
    uptime=0;
	
	sysstate = STATE_INIT;
	systimeout=uptime+1;
	solarstate=0;
	battstate=0;
	
    // init timers
	// timer0 (PWM buck & boost) fast PWM	
	TCCR0B=0x01; // prescaling=0

	// for now turn OFF buck and boost channels	
	TCCR0A=0x03;
    OCR0A=0; // for buck PWM
	OCR0B=0; // for boost PWM

	TIMSK0 = 0;


    // timer1 (ADC restart + uptime)
	TCCR1A = 0x03; // fast PWM mode 0-OCR1A
	TCCR1B = 0x1c; // prescaler /256
	TCCR1C = 0x00;

    // 8000000 / 256 = 31250Hz.  / 31250 = 10Hz interrupt
#define DIV_FACTOR_T1 3125

    OCR1AH = (uint8_t)(DIV_FACTOR_T1 >> 8);
    OCR1AL = (uint8_t)(DIV_FACTOR_T1 & 0xFF); 

    // enable interrupts for timer 1
    TIMSK1=0x02;


    // Turn off the analog comperator to safe power:
    //ACSR |= (1<<ACD);


    /*
     * Start ADC
     */
    
    // Init ADC
    ADMUX = cAdcV; 
    ADMUX |= adcsequence;
    ADCSRA = cRestartAdc; // Restart the ADC again  
		
	// Read our own TWI slave address from EEPROM address 0x00
	TWI_slaveAddress = eeprom_read_byte(&EE_slaveAddress); 

	// Init USI
	USI_TWI_Slave_Initialise();


	/* enable interrupts: */	
	sei();		  

	/* Main loop: */
    while (1) {
    	int8_t sreg;
		uint16_t tmp_adc,tmp_sol;
						

		if( USI_TWI_Data_In_Receive_Buffer() ) {
         	cmd = USI_TWI_Receive_Byte();			
         	switch(cmd) {
				case TWI_CMD_VREQ:
					sreg=SREG;
					cli(); // disable interrupts
					tmp_adc = adc3_vsolar; 
					SREG=sreg; // sei()        			
					break;
				case TWI_CMD_TREQ:
					tmp_adc = uptime;         			
					break;
				default:
					tmp_adc=0;
					break;
			}	
			USI_TWI_Transmit_Byte(sysstate);
			USI_TWI_Transmit_Byte((uint8_t)(tmp_adc>>8));   // MSB
			USI_TWI_Transmit_Byte((uint8_t)(tmp_adc&0xff)); // LSB		
     	}

		



    	if(sysstate == STATE_INIT) {
				if(timed_out()) {
					
					sysstate = STATE_START;
					systimeout=uptime+2;
				}
		} else if(sysstate == STATE_START) {	
				// turn ON buck 	
	        	TCCR0A=0x83;						
				OCR0A=10; // put a little bit power;
				if(timed_out()) {					
					sysstate = STATE_CHARGE;
					systimeout=uptime+2;
				}								
		} else {

#define VOLT_60V	304
#define VOLT_100V	508
#define VOLT_110V	550
#define VOLT_135V	703
#define VOLT_138V   708
#define VOLT_150V	750	


			sreg=SREG;
    		cli(); // disable interrupts	
			tmp_adc = adc1_vbatt;
			tmp_sol = adc3_vsolar;
			SREG=sreg; // sei()

			if(tmp_sol < VOLT_138V) {
				solarstate = SOLAR_TOO_LOW;
			} else {
				solarstate = SOLAR_OK;
			}
			
			if(tmp_adc < VOLT_60V || tmp_adc > VOLT_150V) {
				battstate = BATT_GONE;
			} else if(tmp_adc > VOLT_138V) {
				battstate = BATT_FULL;
			} else if(tmp_adc > VOLT_135V) {
				battstate = BATT_FLOAT;
			} else {
				battstate = BATT_CHARGE;
			}

			if(solarstate != SOLAR_OK || battstate == BATT_GONE) {	
				sysstate = STATE_ERROR;
			} else if(battstate == BATT_FULL) {
				sysstate = STATE_READY;
			} else if((tmp_adc == BATT_FLOAT && bit_is_set(PINA,PA6)) || bit_is_clear(PINA,PA7)) {
				sysstate = STATE_FLOAT;				
			} else { // if((bit_is_clear(PINA,PA6) || sysstate != STATE_FLOAT) && (sysstate < 20)) {
				sysstate = STATE_CHARGE;
    		}  
		}		
		display_state();		   
	}
    return 0;
}


/*
 * Subroutines here:
 */



uint8_t timed_out(void)
{
 390:	4f b7       	in	r20, 0x3f	; 63
    uint8_t sreg;
	sreg=SREG;
    cli(); // disable interrupts
 392:	f8 94       	cli
    if(uptime >= systimeout) { 
 394:	20 91 86 00 	lds	r18, 0x0086
 398:	30 91 87 00 	lds	r19, 0x0087
 39c:	80 91 8c 00 	lds	r24, 0x008C
 3a0:	90 91 8d 00 	lds	r25, 0x008D
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	20 f0       	brcs	.+8      	; 0x3b2 <timed_out+0x22>
        SREG=sreg; // sei()
 3aa:	4f bf       	out	0x3f, r20	; 63
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	08 95       	ret
		return 1;
    } else {
	    SREG=sreg; // sei()
 3b2:	4f bf       	out	0x3f, r20	; 63
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
		return 0;    
	}
}
 3b8:	08 95       	ret

000003ba <display_state>:



void display_state(void)
{	
 3ba:	80 91 88 00 	lds	r24, 0x0088
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	41 f0       	breq	.+16     	; 0x3d2 <display_state+0x18>
	if(battstate == BATT_GONE) {
		PORTB &= ~(1<<LED_RED);
	} else if(battstate == BATT_FULL || battstate == BATT_FLOAT) {
 3c2:	83 30       	cpi	r24, 0x03	; 3
 3c4:	11 f0       	breq	.+4      	; 0x3ca <display_state+0x10>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	31 f4       	brne	.+12     	; 0x3d6 <display_state+0x1c>
		if(subs&0x04) {
 3ca:	80 91 89 00 	lds	r24, 0x0089
 3ce:	82 fd       	sbrc	r24, 2
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <display_state+0x1c>
		    PORTB |= (1<<LED_RED);
		} else {
		    PORTB &= ~(1<<LED_RED);
 3d2:	c0 98       	cbi	0x18, 0	; 24
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <display_state+0x1e>
		}
	} else { // BATT_CHARGE
		PORTB |= (1<<LED_RED);
 3d6:	c0 9a       	sbi	0x18, 0	; 24
	}

	if(solarstate == SOLAR_TOO_LOW) {
 3d8:	80 91 8e 00 	lds	r24, 0x008E
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	29 f4       	brne	.+10     	; 0x3ea <display_state+0x30>
		if(subs&0x04) {
 3e0:	80 91 89 00 	lds	r24, 0x0089
 3e4:	82 fd       	sbrc	r24, 2
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <display_state+0x34>
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <display_state+0x38>
		    PORTB |= (1<<LED_GREEN);
		} else {
		    PORTB &= ~(1<<LED_GREEN);
		}
	} else if(solarstate == SOLAR_OK) {
 3ea:	88 23       	and	r24, r24
 3ec:	11 f4       	brne	.+4      	; 0x3f2 <display_state+0x38>
		PORTB |= ( (1<<LED_GREEN) );
 3ee:	c1 9a       	sbi	0x18, 1	; 24
 3f0:	08 95       	ret
	} else {
		PORTB &= ~( (1<<LED_GREEN) );
 3f2:	c1 98       	cbi	0x18, 1	; 24
 3f4:	08 95       	ret

000003f6 <Flush_TWI_Buffers>:
	}
}

void Flush_TWI_Buffers(void)
{
 3f6:	10 92 6b 00 	sts	0x006B, r1
    TWI_RxTail = 0;
    TWI_RxHead = 0;
 3fa:	10 92 6a 00 	sts	0x006A, r1
    TWI_TxTail = 0;
 3fe:	10 92 75 00 	sts	0x0075, r1
    TWI_TxHead = 0;
 402:	10 92 74 00 	sts	0x0074, r1
 406:	08 95       	ret

00000408 <USI_TWI_Slave_Initialise>:
}
 
//********** USI_TWI functions **********//
 
void USI_TWI_Slave_Initialise( void )
{
 408:	10 92 6b 00 	sts	0x006B, r1
 40c:	10 92 6a 00 	sts	0x006A, r1
 410:	10 92 75 00 	sts	0x0075, r1
 414:	10 92 74 00 	sts	0x0074, r1
   Flush_TWI_Buffers();   
 
   // In Two Wire mode (USIWM1, USIWM0 = 1X), the slave USI will pull SCL
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 418:	8a b3       	in	r24, 0x1a	; 26
 41a:	80 65       	ori	r24, 0x50	; 80
 41c:	8a bb       	out	0x1a, r24	; 26

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 41e:	dc 9a       	sbi	0x1b, 4	; 27

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 420:	de 9a       	sbi	0x1b, 6	; 27

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 422:	d6 98       	cbi	0x1a, 6	; 26

  USICR =
 424:	88 ea       	ldi	r24, 0xA8	; 168
 426:	8d b9       	out	0x0d, r24	; 13
       // enable Start Condition Interrupt
       ( 1 << USISIE ) |
       // disable Overflow Interrupt
       ( 0 << USIOIE ) |
       // set USI in Two-wire mode, no USI Counter overflow hold
       ( 1 << USIWM1 ) | ( 0 << USIWM0 ) |
       // Shift Register Clock Source = external, positive edge
       // 4-Bit Counter Source = external, both edges
       ( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) |
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );                                               // Clear all flags and reset overflow counter
 428:	80 ef       	ldi	r24, 0xF0	; 240
 42a:	8e b9       	out	0x0e, r24	; 14
 42c:	08 95       	ret

0000042e <USI_TWI_Transmit_Byte>:
}

void USI_TWI_Transmit_Byte( uint8_t data )
{
 42e:	28 2f       	mov	r18, r24
     uint8_t tmphead;
 
     tmphead = ( TWI_TxHead + 1 ) & TWI_TX_BUFFER_MASK;         // Calculate buffer index.
 430:	90 91 74 00 	lds	r25, 0x0074
 434:	9f 5f       	subi	r25, 0xFF	; 255
 436:	97 70       	andi	r25, 0x07	; 7
     while ( tmphead == TWI_TxTail );                           // Wait for free space in buffer.
 438:	80 91 75 00 	lds	r24, 0x0075
 43c:	98 17       	cp	r25, r24
 43e:	e1 f3       	breq	.-8      	; 0x438 <USI_TWI_Transmit_Byte+0xa>
     TWI_TxBuf[tmphead] = data;                                 // Store data in buffer.
 440:	e9 2f       	mov	r30, r25
 442:	ff 27       	eor	r31, r31
 444:	e4 59       	subi	r30, 0x94	; 148
 446:	ff 4f       	sbci	r31, 0xFF	; 255
 448:	20 83       	st	Z, r18
     TWI_TxHead = tmphead;                                      // Store new index.
 44a:	90 93 74 00 	sts	0x0074, r25
 44e:	08 95       	ret

00000450 <USI_TWI_Receive_Byte>:
}
 
uint8_t USI_TWI_Receive_Byte( void )
{         
 450:	90 91 6a 00 	lds	r25, 0x006A
 454:	80 91 6b 00 	lds	r24, 0x006B
 458:	98 17       	cp	r25, r24
 45a:	d1 f3       	breq	.-12     	; 0x450 <USI_TWI_Receive_Byte>
     while ( TWI_RxHead == TWI_RxTail );
      
     TWI_RxTail = ( TWI_RxTail + 1 ) & TWI_RX_BUFFER_MASK;        // Calculate buffer index
 45c:	80 91 6b 00 	lds	r24, 0x006B
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	87 70       	andi	r24, 0x07	; 7
 464:	80 93 6b 00 	sts	0x006B, r24
     return TWI_RxBuf[TWI_RxTail];                                // Return data from the buffer.
 468:	e0 91 6b 00 	lds	r30, 0x006B
 46c:	ff 27       	eor	r31, r31
 46e:	ee 59       	subi	r30, 0x9E	; 158
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	80 81       	ld	r24, Z
}
 474:	99 27       	eor	r25, r25
 476:	08 95       	ret

00000478 <USI_TWI_Data_In_Receive_Buffer>:
 
uint8_t USI_TWI_Data_In_Receive_Buffer( void )
{     
 478:	90 91 6a 00 	lds	r25, 0x006A
 47c:	80 91 6b 00 	lds	r24, 0x006B
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	98 17       	cp	r25, r24
 486:	11 f0       	breq	.+4      	; 0x48c <USI_TWI_Data_In_Receive_Buffer+0x14>
     return ( TWI_RxHead != TWI_RxTail );                 // Return 0 (FALSE) if the receive buffer is empty.
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
}
 48c:	93 2f       	mov	r25, r19
 48e:	82 2f       	mov	r24, r18
 490:	08 95       	ret

00000492 <main>:
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	87 e0       	ldi	r24, 0x07	; 7
 498:	87 bb       	out	0x17, r24	; 23
 49a:	88 e0       	ldi	r24, 0x08	; 8
 49c:	88 bb       	out	0x18, r24	; 24
 49e:	1a ba       	out	0x1a, r1	; 26
 4a0:	80 ef       	ldi	r24, 0xF0	; 240
 4a2:	8b bb       	out	0x1b, r24	; 27
 4a4:	33 e0       	ldi	r19, 0x03	; 3
 4a6:	30 93 79 00 	sts	0x0079, r19
 4aa:	10 92 7e 00 	sts	0x007E, r1
 4ae:	10 92 7d 00 	sts	0x007D, r1
 4b2:	10 92 8b 00 	sts	0x008B, r1
 4b6:	10 92 8a 00 	sts	0x008A, r1
 4ba:	10 92 7c 00 	sts	0x007C, r1
 4be:	10 92 7b 00 	sts	0x007B, r1
 4c2:	10 92 77 00 	sts	0x0077, r1
 4c6:	10 92 76 00 	sts	0x0076, r1
 4ca:	10 92 80 00 	sts	0x0080, r1
 4ce:	10 92 7f 00 	sts	0x007F, r1
 4d2:	10 92 82 00 	sts	0x0082, r1
 4d6:	10 92 81 00 	sts	0x0081, r1
 4da:	10 92 89 00 	sts	0x0089, r1
 4de:	10 92 87 00 	sts	0x0087, r1
 4e2:	10 92 86 00 	sts	0x0086, r1
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	20 93 83 00 	sts	0x0083, r18
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	90 93 8d 00 	sts	0x008D, r25
 4f4:	80 93 8c 00 	sts	0x008C, r24
 4f8:	10 92 8e 00 	sts	0x008E, r1
 4fc:	10 92 88 00 	sts	0x0088, r1
 500:	23 bf       	out	0x33, r18	; 51
 502:	30 bf       	out	0x30, r19	; 48
 504:	16 be       	out	0x36, r1	; 54
 506:	1c be       	out	0x3c, r1	; 60
 508:	19 be       	out	0x39, r1	; 57
 50a:	3f bd       	out	0x2f, r19	; 47
 50c:	8c e1       	ldi	r24, 0x1C	; 28
 50e:	8e bd       	out	0x2e, r24	; 46
 510:	12 bc       	out	0x22, r1	; 34
 512:	8c e0       	ldi	r24, 0x0C	; 12
 514:	8b bd       	out	0x2b, r24	; 43
 516:	85 e3       	ldi	r24, 0x35	; 53
 518:	8a bd       	out	0x2a, r24	; 42
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	8c b9       	out	0x0c, r24	; 12
 51e:	17 b8       	out	0x07, r1	; 7
 520:	87 b1       	in	r24, 0x07	; 7
 522:	83 60       	ori	r24, 0x03	; 3
 524:	87 b9       	out	0x07, r24	; 7
 526:	8c ec       	ldi	r24, 0xCC	; 204
 528:	86 b9       	out	0x06, r24	; 6
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
 52a:	a0 e0       	ldi	r26, 0x00	; 0
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	a3 d0       	rcall	.+326    	; 0x676 <__eeprom_read_byte_1C1D1E>
 530:	80 2d       	mov	r24, r0
 532:	80 93 60 00 	sts	0x0060, r24
 536:	68 df       	rcall	.-304    	; 0x408 <USI_TWI_Slave_Initialise>
 538:	78 94       	sei
 53a:	90 91 6a 00 	lds	r25, 0x006A
 53e:	80 91 6b 00 	lds	r24, 0x006B
 542:	98 17       	cp	r25, r24
 544:	e1 f0       	breq	.+56     	; 0x57e <main+0xec>
 546:	84 df       	rcall	.-248    	; 0x450 <USI_TWI_Receive_Byte>
 548:	85 3a       	cpi	r24, 0xA5	; 165
 54a:	29 f0       	breq	.+10     	; 0x556 <main+0xc4>
 54c:	86 3a       	cpi	r24, 0xA6	; 166
 54e:	59 f0       	breq	.+22     	; 0x566 <main+0xd4>
 550:	c0 e0       	ldi	r28, 0x00	; 0
 552:	d0 e0       	ldi	r29, 0x00	; 0
 554:	0c c0       	rjmp	.+24     	; 0x56e <main+0xdc>
 556:	8f b7       	in	r24, 0x3f	; 63
 558:	f8 94       	cli
 55a:	c0 91 7d 00 	lds	r28, 0x007D
 55e:	d0 91 7e 00 	lds	r29, 0x007E
 562:	8f bf       	out	0x3f, r24	; 63
 564:	04 c0       	rjmp	.+8      	; 0x56e <main+0xdc>
 566:	c0 91 86 00 	lds	r28, 0x0086
 56a:	d0 91 87 00 	lds	r29, 0x0087
 56e:	80 91 83 00 	lds	r24, 0x0083
 572:	5d df       	rcall	.-326    	; 0x42e <USI_TWI_Transmit_Byte>
 574:	8d 2f       	mov	r24, r29
 576:	99 27       	eor	r25, r25
 578:	5a df       	rcall	.-332    	; 0x42e <USI_TWI_Transmit_Byte>
 57a:	8c 2f       	mov	r24, r28
 57c:	58 df       	rcall	.-336    	; 0x42e <USI_TWI_Transmit_Byte>
 57e:	80 91 83 00 	lds	r24, 0x0083
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	31 f4       	brne	.+12     	; 0x592 <main+0x100>
 586:	04 df       	rcall	.-504    	; 0x390 <timed_out>
 588:	88 23       	and	r24, r24
 58a:	09 f4       	brne	.+2      	; 0x58e <main+0xfc>
 58c:	60 c0       	rjmp	.+192    	; 0x64e <main+0x1bc>
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	0b c0       	rjmp	.+22     	; 0x5a8 <main+0x116>
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	a9 f4       	brne	.+42     	; 0x5c0 <main+0x12e>
 596:	83 e8       	ldi	r24, 0x83	; 131
 598:	80 bf       	out	0x30, r24	; 48
 59a:	8a e0       	ldi	r24, 0x0A	; 10
 59c:	86 bf       	out	0x36, r24	; 54
 59e:	f8 de       	rcall	.-528    	; 0x390 <timed_out>
 5a0:	88 23       	and	r24, r24
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <main+0x114>
 5a4:	54 c0       	rjmp	.+168    	; 0x64e <main+0x1bc>
 5a6:	83 e0       	ldi	r24, 0x03	; 3
 5a8:	80 93 83 00 	sts	0x0083, r24
 5ac:	80 91 86 00 	lds	r24, 0x0086
 5b0:	90 91 87 00 	lds	r25, 0x0087
 5b4:	02 96       	adiw	r24, 0x02	; 2
 5b6:	90 93 8d 00 	sts	0x008D, r25
 5ba:	80 93 8c 00 	sts	0x008C, r24
 5be:	47 c0       	rjmp	.+142    	; 0x64e <main+0x1bc>
 5c0:	8f b7       	in	r24, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	20 91 76 00 	lds	r18, 0x0076
 5c8:	30 91 77 00 	lds	r19, 0x0077
 5cc:	8f bf       	out	0x3f, r24	; 63
 5ce:	80 91 7d 00 	lds	r24, 0x007D
 5d2:	90 91 7e 00 	lds	r25, 0x007E
 5d6:	84 5c       	subi	r24, 0xC4	; 196
 5d8:	92 40       	sbci	r25, 0x02	; 2
 5da:	20 f4       	brcc	.+8      	; 0x5e4 <main+0x152>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 8e 00 	sts	0x008E, r24
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <main+0x156>
 5e4:	10 92 8e 00 	sts	0x008E, r1
 5e8:	93 2f       	mov	r25, r19
 5ea:	82 2f       	mov	r24, r18
 5ec:	80 53       	subi	r24, 0x30	; 48
 5ee:	91 40       	sbci	r25, 0x01	; 1
 5f0:	8f 5b       	subi	r24, 0xBF	; 191
 5f2:	91 40       	sbci	r25, 0x01	; 1
 5f4:	10 f0       	brcs	.+4      	; 0x5fa <main+0x168>
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	05 c0       	rjmp	.+10     	; 0x604 <main+0x172>
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	25 3c       	cpi	r18, 0xC5	; 197
 5fe:	38 07       	cpc	r19, r24
 600:	20 f0       	brcs	.+8      	; 0x60a <main+0x178>
 602:	83 e0       	ldi	r24, 0x03	; 3
 604:	80 93 88 00 	sts	0x0088, r24
 608:	08 c0       	rjmp	.+16     	; 0x61a <main+0x188>
 60a:	42 e0       	ldi	r20, 0x02	; 2
 60c:	20 3c       	cpi	r18, 0xC0	; 192
 60e:	34 07       	cpc	r19, r20
 610:	10 f0       	brcs	.+4      	; 0x616 <main+0x184>
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	f7 cf       	rjmp	.-18     	; 0x604 <main+0x172>
 616:	10 92 88 00 	sts	0x0088, r1
 61a:	80 91 8e 00 	lds	r24, 0x008E
 61e:	88 23       	and	r24, r24
 620:	21 f4       	brne	.+8      	; 0x62a <main+0x198>
 622:	80 91 88 00 	lds	r24, 0x0088
 626:	82 30       	cpi	r24, 0x02	; 2
 628:	11 f4       	brne	.+4      	; 0x62e <main+0x19c>
 62a:	8a e0       	ldi	r24, 0x0A	; 10
 62c:	0e c0       	rjmp	.+28     	; 0x64a <main+0x1b8>
 62e:	83 30       	cpi	r24, 0x03	; 3
 630:	11 f4       	brne	.+4      	; 0x636 <main+0x1a4>
 632:	84 e1       	ldi	r24, 0x14	; 20
 634:	0a c0       	rjmp	.+20     	; 0x64a <main+0x1b8>
 636:	21 30       	cpi	r18, 0x01	; 1
 638:	31 05       	cpc	r19, r1
 63a:	11 f4       	brne	.+4      	; 0x640 <main+0x1ae>
 63c:	ce 99       	sbic	0x19, 6	; 25
 63e:	02 c0       	rjmp	.+4      	; 0x644 <main+0x1b2>
 640:	cf 99       	sbic	0x19, 7	; 25
 642:	02 c0       	rjmp	.+4      	; 0x648 <main+0x1b6>
 644:	84 e0       	ldi	r24, 0x04	; 4
 646:	01 c0       	rjmp	.+2      	; 0x64a <main+0x1b8>
 648:	83 e0       	ldi	r24, 0x03	; 3
 64a:	80 93 83 00 	sts	0x0083, r24
 64e:	b5 de       	rcall	.-662    	; 0x3ba <display_state>
 650:	74 cf       	rjmp	.-280    	; 0x53a <main+0xa8>

00000652 <__mulhi3>:
 652:	55 27       	eor	r21, r21
 654:	00 24       	eor	r0, r0

00000656 <__mulhi3_loop>:
 656:	80 ff       	sbrs	r24, 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <__mulhi3_skip1>
 65a:	06 0e       	add	r0, r22
 65c:	57 1f       	adc	r21, r23

0000065e <__mulhi3_skip1>:
 65e:	66 0f       	add	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	61 15       	cp	r22, r1
 664:	71 05       	cpc	r23, r1
 666:	21 f0       	breq	.+8      	; 0x670 <__mulhi3_exit>
 668:	96 95       	lsr	r25
 66a:	87 95       	ror	r24
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	99 f7       	brne	.-26     	; 0x656 <__mulhi3_loop>

00000670 <__mulhi3_exit>:
 670:	95 2f       	mov	r25, r21
 672:	80 2d       	mov	r24, r0
 674:	08 95       	ret

00000676 <__eeprom_read_byte_1C1D1E>:
 676:	e1 99       	sbic	0x1c, 1	; 28
 678:	fe cf       	rjmp	.-4      	; 0x676 <__eeprom_read_byte_1C1D1E>
 67a:	bf bb       	out	0x1f, r27	; 31
 67c:	ae bb       	out	0x1e, r26	; 30
 67e:	e0 9a       	sbi	0x1c, 0	; 28
 680:	11 96       	adiw	r26, 0x01	; 1
 682:	0d b2       	in	r0, 0x1d	; 29
 684:	08 95       	ret

00000686 <_exit>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <_exit>
